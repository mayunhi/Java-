# Java-
                                                              入门级Java多线程


#备注：转载自http://blog.csdn.net/evankaka，感谢大佬分享------

#概念：
进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1--n个线程。（进程是资源分配的最小单位）
线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）

线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。
多进程是指操作系统能同时运行多个任务（程序）。
多线程是指在同一程序中有多个顺序流在执行。


#提醒：   
  1、main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。
  2、在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。
   *因为每当使用java命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实质就是在操作系统中启动了一个进程*。
   
![线程状态转换](https://raw.githubusercontent.com/mayunhi/Java-/master/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png)
                                                              
                                                              线程状态转换图
                                                              
#状态转换之间的描述：<br/>
  1、新建状态（New）：新创建了一个线程对象。<br/>
  2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。<br/>
  3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。<br/>
  4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br/>
    （一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)<br/>
    （二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中<br/>
    （三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）<br/>
  5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。<br/>
  
#线程的调度<br/>
    1、调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。<br/>
    Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：<br/>
  
  
  static int MAX_PRIORITY<br/>
  线程可以具有的最高优先级，取值为10。<br/>
  static int MIN_PRIORITY<br/>
  线程可以具有的最低优先级，取值为1。<br/>
  static int NORM_PRIORITY<br/>
  分配给线程的默认优先级，取值为5。<br/>
